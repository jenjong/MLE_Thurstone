boxplot(zmat)
burn_num = 1e+4
restore_num = 5e+3
# burning
for (j in rep(1:p, burn_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
z[j] = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
}
# restore
z_tmp = rep(0, p*restore_num)
j_k = 1
for (j in rep(1:p, restore_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
tz = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
z[j] = tz
z_tmp[j_k]  = tz
j_k = j_k + 1
}
zmat = matrix(z_tmp, restore_num, p, byrow = T)
colMeans(zmat)
boxplot(zmat)
burn_num = 1e+4
restore_num = 5e+3
# burning
for (j in rep(1:p, burn_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
z[j] = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
}
# restore
z_tmp = rep(0, p*restore_num)
j_k = 1
for (j in rep(1:p, restore_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
tz = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
z[j] = tz
z_tmp[j_k]  = tz
j_k = j_k + 1
}
zmat = matrix(z_tmp, restore_num, p, byrow = T)
colMeans(zmat)
boxplot(zmat)
colMeans(zmat)
colMeans(zmat)
boxplot(zmat)
# sampling
i = 2 ; length(rank_id)
idx = which(rank_index == i)
x = pi_mat[idx[1],]
# set an initial of z
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
burn_num = 1e+4
restore_num = 5e+3
# burning
for (j in rep(1:p, burn_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
z[j] = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
}
# restore
z_tmp = rep(0, p*restore_num)
j_k = 1
for (j in rep(1:p, restore_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
tz = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
z[j] = tz
z_tmp[j_k]  = tz
j_k = j_k + 1
}
zmat = matrix(z_tmp, restore_num, p, byrow = T)
colMeans(zmat)
boxplot(zmat)
x
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
z
rank_id
rank_id
x
x
x
n = 1
set.seed(1)
z = mvrnorm(n, mu, Sigma)
z
t(apply(z, 1, order, decreasing = T))
z = mvrnorm(n, mu, Sigma)
t(apply(z, 1, order, decreasing = T))
n = 2
set.seed(1)
z = mvrnorm(n, mu, Sigma)
pi_mat =t(apply(z, 1, order, decreasing = T))
pi_mat
z
x
j = 1
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
x
# burning
x
# burning
rank(x)
?rank
# burning
sort(x)$ix
# burning
sort(x, index.return = T)$ix
rm(list = ls()); gc()
library(MASS)
library(truncnorm)
p = 5
mu = seq(5,0, length = p)
Sigma = diag(1,p)
n = 2
set.seed(1)
z = mvrnorm(n, mu, Sigma)
# pi_mat denotes the ranks of items
pi_mat =t(apply(z, 1, order, decreasing = T))
# ranking index
rank_index_t = c("", n)
for (i in 1:n)
{
x = pi_mat[i,]
if (p<10)
{
xt = as.character(x)
rank_index_t[i] = paste(xt,sep='',collapse = "")
}
if (p>=10)
{
xt = x
idx = (nchar(xt)==1)
xt[idx] = paste0("0",xt[idx])
rank_index_t[i] = paste(xt,sep='',collapse = "")
}
}
rank_index_t = factor(rank_index_t)
rank_id = levels(rank_index_t)
rank_index = as.integer(rank_index_t)
# initialization:: pairwise comparisons (package)
mu_e = seq(5,0, length = p)
Sig_e = diag(1,p)
Omg_e = solve(Sig_e)
# sampling
i = 2 ; length(rank_id)
idx = which(rank_index == i)
x = pi_mat[idx[1],]
# set an initial of z
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
burn_num = 1e+4
restore_num = 5e+3
# sampling
i = 10 ; length(rank_id)
idx = which(rank_index == i)
x = pi_mat[idx[1],]
# set an initial of z
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
idx
rank_index
rm(list = ls()); gc()
library(MASS)
library(truncnorm)
p = 5
mu = seq(5,0, length = p)
Sigma = diag(1,p)
n = 100
set.seed(1)
z = mvrnorm(n, mu, Sigma)
# pi_mat denotes the ranks of items
pi_mat =t(apply(z, 1, order, decreasing = T))
# ranking index
rank_index_t = c("", n)
for (i in 1:n)
{
x = pi_mat[i,]
if (p<10)
{
xt = as.character(x)
rank_index_t[i] = paste(xt,sep='',collapse = "")
}
if (p>=10)
{
xt = x
idx = (nchar(xt)==1)
xt[idx] = paste0("0",xt[idx])
rank_index_t[i] = paste(xt,sep='',collapse = "")
}
}
rank_index_t = factor(rank_index_t)
rank_id = levels(rank_index_t)
rank_index = as.integer(rank_index_t)
# initialization:: pairwise comparisons (package)
mu_e = seq(5,0, length = p)
Sig_e = diag(1,p)
Omg_e = solve(Sig_e)
# sampling
i = 10 ; length(rank_id)
idx = which(rank_index == i)
x = pi_mat[idx[1],]
# set an initial of z
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
rank_id
x
burn_num = 1e+4
restore_num = 5e+3
# burning
sort(x, index.return = T)$ix
x
# burning
sort(x, index.return = T)
i = 9 ; length(rank_id)
idx = which(rank_index == i)
x = pi_mat[idx[1],]
# set an initial of z
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
burn_num = 1e+4
restore_num = 5e+3
# burning
sort(x, index.return = T)
x
# burning
sort(x, index.return = T)$ix
# burning
ix = sort(x, index.return = T)$ix
ix
ix
j_c = 1
ix
x
burn_num = 1e+4
restore_num = 5e+3
# burning
ix = sort(x, index.return = T)$ix
ix
j_c = 1
j_c
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
ix
x
j = 1
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
m
v = sqrt(1/Omg_e[j,j])
v
if (j_c == 1) b = Inf else b = z[x[j_c-1]]
j_c+1
x[j_c+1]
ix[j_c+1]
library(genlasso)
library(glasso)
install.packages("glasso")
library(glasso)
?glasso
x<-matrix(rnorm(50*20),ncol=20)
s<- var(x)
a<-glasso(s, rho=.01)
aa<-glasso(s,rho=.02, w.init=a$w, wi.init=a$wi)
aa
x<-matrix(rnorm(50*20),ncol=20)
s<- var(x)
a<-glasso(s, rho=.01)
aa<-glasso(s,rho=.2, w.init=a$w, wi.init=a$wi)
aa
install.packages("doParallel")
install.packages("foreach")
library(doParallel)
library(foreach)
rm(list=ls()); gc()
library(doParallel)
library(foreach)
numCores = 4
registerDoParallel(numCores)  # use multicore, set to the number of our cores
foreach (i=1:3) %dopar% {
sqrt(i)
}
afun = function(i) sqrt(i)
foreach (i=1:3) %dopar% {
afun(i)
}
a = c(2,1,3)
foreach (i=a) %dopar% {
afun(i)
}
?foreach
install.packages("C:/Users/Jeon/Desktop/testpack.zip", repos = NULL, type = "win.binary")
library(testpack)
hello()
install.packages("RcppTN")
library(RcppTN)
?rtn
rtn()
library(Rcpp)
sourceCpp("C:/Users/Jeon/Desktop/j1/rtnRcpp.cpp")
sourceCpp("C:/Users/Jeon/Desktop/j1/rtnRcpp.cpp")
rm(list = ls()); gc()
if (Sys.info()[1]=="Linux")
{
setwd("~/Documents/GitHub/MLE_Thurstone")
} else {
setwd("~/GitHub/MLE_Thurstone")
}
source("./lib/pack.R")
library(test2)
p = 3
mu = seq(2,0, length = p)
Sigma = matrix(0.5, p, p)
Sigma[,p] =  Sigma[p,] = 0
diag(Sigma) = 1
n = 1000
burn_num = 1e+2
restore_num = 5e+3
parallel = T
verbose = F
numCores = 6
if (parallel == T) registerDoParallel(numCores)
set.seed(1)
z = mvrnorm(n, mu, Sigma)
# pi_mat denotes the index of items
# pi_mat[i,k]: the index of item with rank k in the ith experi
pi_mat =t(apply(z, 1, order, decreasing = T))
rankIndex_list = rankIndex_fun(pi_mat)
# initialization:: pairwise comparisons (package)
fit_mat = convToMat_fun(pi_mat)
d_mat = genDesignR_fun(p)
wvec = convToW_fun(fit_mat)
fit_model = glm.fit(x = d_mat$x, y=d_mat$y,
weight = wvec, family = binomial(link='probit'),
intercept = FALSE)
mu_e = c(fit_model$coefficients*sqrt(2),0) # note: probit reg z~N(0, 1/sqrt(2))
Sig_e = diag(1,p)
Omg_e = solve(Sig_e)
a = E_fun_C(1,pi_mat, rankIndex_list, mu_e, Sig_e, Omg_e,
burn_num, restore_num, parallel, verbose)
names(a)
rm(list = ls()); gc()
if (Sys.info()[1]=="Linux")
{
setwd("~/Documents/GitHub/MLE_Thurstone")
} else {
setwd("~/GitHub/MLE_Thurstone")
}
source("./lib/pack.R")
library(test2)
p = 3
mu = seq(2,0, length = p)
Sigma = matrix(0.5, p, p)
Sigma[,p] =  Sigma[p,] = 0
diag(Sigma) = 1
n = 1000
burn_num = 1e+2
restore_num = 5e+3
parallel = T
verbose = F
numCores = 6
if (parallel == T) registerDoParallel(numCores)
set.seed(1)
z = mvrnorm(n, mu, Sigma)
# pi_mat denotes the index of items
# pi_mat[i,k]: the index of item with rank k in the ith experi
pi_mat =t(apply(z, 1, order, decreasing = T))
rankIndex_list = rankIndex_fun(pi_mat)
# initialization:: pairwise comparisons (package)
fit_mat = convToMat_fun(pi_mat)
d_mat = genDesignR_fun(p)
wvec = convToW_fun(fit_mat)
fit_model = glm.fit(x = d_mat$x, y=d_mat$y,
weight = wvec, family = binomial(link='probit'),
intercept = FALSE)
mu_e = c(fit_model$coefficients*sqrt(2),0) # note: probit reg z~N(0, 1/sqrt(2))
Sig_e = diag(1,p)
Omg_e = solve(Sig_e)
a = E_fun_C(1,pi_mat, rankIndex_list, mu_e, Sig_e, Omg_e,
burn_num, restore_num, parallel, verbose)
install.packages("test2")
install.packages("test2")
library(test2)
rm(list = ls()); gc()
if (Sys.info()[1]=="Linux")
{
setwd("~/Documents/GitHub/MLE_Thurstone")
} else {
setwd("~/GitHub/MLE_Thurstone")
}
source("./lib/pack.R")
library(test2)
p = 3
mu = seq(2,0, length = p)
Sigma = matrix(0.5, p, p)
Sigma[,p] =  Sigma[p,] = 0
diag(Sigma) = 1
n = 1000
burn_num = 1e+2
restore_num = 5e+3
parallel = T
verbose = F
numCores = 6
if (parallel == T) registerDoParallel(numCores)
set.seed(1)
z = mvrnorm(n, mu, Sigma)
# pi_mat denotes the index of items
# pi_mat[i,k]: the index of item with rank k in the ith experi
pi_mat =t(apply(z, 1, order, decreasing = T))
rankIndex_list = rankIndex_fun(pi_mat)
# initialization:: pairwise comparisons (package)
fit_mat = convToMat_fun(pi_mat)
d_mat = genDesignR_fun(p)
wvec = convToW_fun(fit_mat)
fit_model = glm.fit(x = d_mat$x, y=d_mat$y,
weight = wvec, family = binomial(link='probit'),
intercept = FALSE)
mu_e = c(fit_model$coefficients*sqrt(2),0) # note: probit reg z~N(0, 1/sqrt(2))
Sig_e = diag(1,p)
Omg_e = solve(Sig_e)
a = E_fun_C(1,pi_mat, rankIndex_list, mu_e, Sig_e, Omg_e,
burn_num, restore_num, parallel, verbose)
names(a)
library(test2)
a = E_fun_C(pi_mat, rankIndex_list, mu_e, Sig_e, Omg_e,
burn_num, restore_num, parallel, verbose)
names(a)
rm(list = ls()); gc()
if (Sys.info()[1]=="Linux")
{
setwd("~/Documents/GitHub/MLE_Thurstone")
} else {
setwd("~/GitHub/MLE_Thurstone")
}
source("./lib/pack.R")
library(test2)
p = 3
mu = seq(2,0, length = p)
Sigma = matrix(0.5, p, p)
Sigma[,p] =  Sigma[p,] = 0
diag(Sigma) = 1
n = 1000
burn_num = 1e+2
restore_num = 5e+3
parallel = T
verbose = F
numCores = 6
if (parallel == T) registerDoParallel(numCores)
set.seed(1)
z = mvrnorm(n, mu, Sigma)
# pi_mat denotes the index of items
# pi_mat[i,k]: the index of item with rank k in the ith experi
pi_mat =t(apply(z, 1, order, decreasing = T))
rankIndex_list = rankIndex_fun(pi_mat)
# initialization:: pairwise comparisons (package)
fit_mat = convToMat_fun(pi_mat)
d_mat = genDesignR_fun(p)
wvec = convToW_fun(fit_mat)
fit_model = glm.fit(x = d_mat$x, y=d_mat$y,
weight = wvec, family = binomial(link='probit'),
intercept = FALSE)
mu_e = c(fit_model$coefficients*sqrt(2),0) # note: probit reg z~N(0, 1/sqrt(2))
Sig_e = diag(1,p)
Omg_e = solve(Sig_e)
a = E_fun_C(pi_mat, rankIndex_list, mu_e, Sig_e, Omg_e,
burn_num, restore_num, parallel, verbose)
names(a)
